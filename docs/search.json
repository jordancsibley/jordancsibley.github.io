[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jordan Sibley",
    "section": "",
    "text": "Hey! Currently, I am a Master of Environmental Data Science (MEDS) student at the Bren School of Environmental Science & Management. During my time here at Bren, I aim to harness my analytical prowess in data science to drive impactful contributions to scientific research and sustainable solutions for marine coastal ecosystems."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jordan Sibley",
    "section": "Education",
    "text": "Education\nMaster of Environmental Data Science (June 2025) Bren School of Environmental Science & Management\nBachelor of Science in Aquatic Biology (June 2023) University of California, Santa Barbara"
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "",
    "text": "This project provides an in-depth analysis of the Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017. The first part of the analysis examines air quality impacts using Air Quality Index (AQI) data from the US Environmental Protection Agency, visualizing how air quality changed over time during and after the fire. The second part focuses on the fire’s physical impact, leveraging Landsat 8 satellite imagery and historic fire perimeter data. By applying false-color imaging techniques, this analysis highlights fire scars and assesses vegetation health in the affected areas."
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#highlights-of-analysis",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#highlights-of-analysis",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "Highlights of Analysis",
    "text": "Highlights of Analysis\n\nData Wrangling: A portion of the project involves cleaning and preparing the data for analysis. This includes updating data types of the AQI data and dropping the band dimension for the Landsat dataset for better usablity.\nWorking with different data types: This analysis utilizes many different data types which required unique packages for reading in. The AQI data was read in using pandas from an online repository, while the spatial data required rioxarray and geopandas.\nFalse Color Imaging: The notebook explores how false color images can highlight burn areas using shortwave infrared (SWIR) and near-infrared (NIR) bands to distinguish between burned land and healthy vegetation.\n\nSee more about my analyses on the GitHub repository for this project."
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#data",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#data",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "Data",
    "text": "Data\n\nAir Quality Index (AQI) Data The AQI data comes from the US Environmental Protection Agency. It includes daily air quality index score for Santa Barbara county.\nLandsat 8 Data: The Landsat data used in this analysis is the landsat8-2018-01-26-sb-simplified.nc dataset, which includes key spectral bands (e.g., shortwave infrared, near-infrared, and red) for the Santa Barbara region. This data is used to create both true color and false color images, with specific bands selected to highlight different land features.\nFire Perimeter Data: The fire perimeter data comes from CAL FIRE and is used to overlay the Thomas Fire’s boundary on the imagery. The selected dataset includes the fire perimeter for the 2017 Thomas Fire which was extracted from the larger database and then saved as a shapefile. The process of selecting this fire perimeter can be seen in this Jupyter notebook.\n\nReferences and Data Sources:\nEnvironmental Protection Agency (EPA). Air Quality Index (AQI) Data. https://aqs.epa.gov/aqsweb/airdata/download_files.html (Accessed October, 2024)\nEarth Resources Observation and Science (EROS) Center. (2020). Landsat 8-9 Operational Land Imager / Thermal Infrared Sensor Level-2, Collection 2 [dataset]. U.S. Geological Survey. https://doi.org/10.5066/P9OGBGM6 (Access Novemeber, 2024)\nCalifornia Department of Forestry and Fire Protection (CAL FIRE). (2023). California fire perimeters (all). Data.gov. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436 (Accessed November, 2024)\n\nSet Up\n\n\nShow code\n# Import libraries \nimport pandas as pd\nimport numpy as np\nimport os \n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nimport geopandas as gpd \nimport rioxarray as rioxr\nimport matplotlib.patches as mpatches # For custom legend creation\nfrom matplotlib_scalebar.scalebar import ScaleBar \n\n# Show all columns \npd.set_option(\"display.max.columns\", None)\n\n\n\n\nImport data\n\n\nShow code\n# ---- AQI data for 2017-2018 \n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression='zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression='zip')\n\n# Concatnate the 'aqi_17' and 'aqi_18' dataframes into a single dataframe\naqi = pd.concat([aqi_17, aqi_18])\n\n# ---- Landsat data \n\n# Path to data in folder \nlandsat_fp = os.path.join(os.getcwd(), 'data', 'landsat8-2018-01-26-sb-simplified.nc')\n\n# Open with rioxarray\nlandsat = rioxr.open_rasterio(landsat_fp)\n\n# ---- Thomas fire perimeter \n\n# Path to data in file  \nthomas_fp = os.path.join(os.getcwd(), 'data', 'thomas.shp')\n\n# Read in Thomas fire perimeter data\nthomas = gpd.read_file(thomas_fp)"
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#aqi-analysis",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#aqi-analysis",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "AQI Analysis",
    "text": "AQI Analysis\n\nClean Data\nIn order to use the dataset that includes the daily AQI, the following steps were taken:\n\nClean column names: The columns were converted to lower snake case through the functions .str.lower() and .str.replace() to remove the spaces inbetween the words. This allows for better readablity and compatiblity with certain python functions.\nFilter to SB County: The dataset included AQI scores for all counties in the U.S. It needed to be filtered to just include the county of interest.\nDrop columns: Columns were removed using .drop() in order to only leave the columns needed for analysis.\nConvert date column: The orginal date column was in the data type object. By using pandas.to_datetime it was changed to a datetime data type which will make it easier to extract certain dates and for creating a time series graph.\n\n\n\nShow code\n# Clean column names \naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\n\n# Filter to Santa Barbara County \naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\n\n# Drop columns relating to state and county info \naqi_sb = aqi_sb.drop(['state_name', 'county_name', 'state_code', 'county_code'], axis=1)\n\n# Change 'date' column from object to datetime data type\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\n\n# Update the index of the dataframe to be the 'date' column \naqi_sb = aqi_sb.set_index('date')\n\n\n\n\nCalculate Rolling Averages\nWhile the data provides the daily AQI score, it is sometimes better for visibility in an plot if a rolling average is calculated. For this particular plot, the rolling 5 day average was calculated using the pandas method rolling() and mean() to find the average AQI score over the 5 day window.\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n\n# Add rolling average values to new column in data frame \naqi_sb['five_day_average'] = rolling_average\n\n\n\nPlot AQI for 2017 through 2018\nNow that the data is cleaned and the rolling average has been calculated, a plot of daily and average AQI can be plotted from January 2017 to January 2019.\n\n\nShow code\n# Establish plot boundaries\nplt.figure()\n\n# Line plot of daily aqi \nplt.plot(aqi_sb.index, aqi_sb['aqi'], label='Daily AQI', color='blue', linewidth=1)\n\n# Line plot of 5 day moving averages \nplt.plot(aqi_sb.index, aqi_sb['five_day_average'], label='5-Day Average AQI', color='red', linewidth=2)\n\n# Add labels and title\nplt.xlabel('Date', fontsize=12)\nplt.ylabel('AQI', fontsize=12)\nplt.title('Santa Barbara County Air Quality Index (2017-2018)', fontsize=14)\n\n# Fix the x-axis to show only month and last 2 digits of the year\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\n\n# Add a legend \nplt.legend()\n\n\n<matplotlib.legend.Legend at 0x7f768ae55d90>\n\n\n\n\n\nLooking at the plot, there is a large spike in the daily and average AQI score right before Janurary 2018. The Thomas Fire took place from December 4, 2017, until its containment on January 12, 2018 so it makes sense to see a higher AQI score during this time period due to the smoke and air contaminates as a result of the fire."
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#spatial-analysis",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#spatial-analysis",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "Spatial Analysis",
    "text": "Spatial Analysis\nThe visualize the extent of the Thomas Fire, Landsat 8 imagery can be used to view satelite images in their true (Red Green Blue bands) colors and also by visualizing the shortwave infrared bands and near infrared bands. These bands are able to better analyze the damage done by fires than just a satelite image due to their distinct responses to vegetation, soil, and water content.\nLandsat data consists of satellite imagery collected by the Landsat program, a series of Earth-observing satellites jointly managed by NASA and the U.S. Geological Survey (USGS). Landsat sensors capture data in multiple spectral bands, including visible light, near-infrared (NIR), shortwave infrared (SWIR), and thermal infrared (TIR).\nHere are articles that go into more depth about Landsat data use:\n\nNASA Earth Observatory - Why is that Forest Red and that Cloud Blue? How to Interpret a False-Color Satellite Image\nWhat are the band designations for the Landsat satellites?\nCommon Landsat Band Combinations\n\n\nData Exploration\n\n\nShow code\n# View data elements \nprint('Height: ', landsat.rio.height)\nprint('Width: ', landsat.rio.width)\nprint('Size of dimensions: ', dict(landsat.sizes))\nprint('Spatial bounding box:')\nprint(landsat.rio.bounds(), '\\n')\nprint('CRS: ', landsat.rio.crs)\n\n\nHeight:  731\nWidth:  870\nSize of dimensions:  {'band': 1, 'x': 870, 'y': 731}\nSpatial bounding box:\n(121170.0, 3755160.0, 356070.0, 3952530.0) \n\nCRS:  EPSG:32611\n\n\nThe landsat data is an xarray that contains the band information. The dimensions are x and y and also band that just contains the interger 1. The data variables of the xarray are the band types which are red, green, blue, near infrared (nir08), and the shortwave infrared (swir22)."
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#data-cleaning",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#data-cleaning",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nSince the band dimension of the data has only one value 1 it is unnecessary to keep and is best practice to remove. Using the xarray.DataArray methods squeeze() and drop_vars() executes this by removing any dimensions of size 1 and then removing the variable band from the dataset.\n\n\nShow code\n# Drop the `band` dimension of the data and remove dims of length 1 \nlandsat = landsat.squeeze().drop_vars('band')\n\n# View altered landsat data \nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 25MB\nDimensions:      (x: 870, y: 731)\nCoordinates:\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (y, x) float64 5MB ...\n    green        (y, x) float64 5MB ...\n    blue         (y, x) float64 5MB ...\n    nir08        (y, x) float64 5MB ...\n    swir22       (y, x) float64 5MB ...xarray.DatasetDimensions:x: 870y: 731Coordinates: (3)x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (2)xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nNow we are left with the dimensions x and y which are coordinates that hold spectal band information needed to produce the landsat map images."
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#true-color-rgb-image",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#true-color-rgb-image",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "True Color (RGB) Image",
    "text": "True Color (RGB) Image\nBy selecting the visual bands red, green, and blue and placing them in their true channels, we are able to see an image with colors that you would expect in the environment.\n\n# Adjust scale to get true color image \nlandsat[['red', 'green', 'blue']].to_array().plot.imshow(robust=True)\n\n<matplotlib.image.AxesImage at 0x7f74cd9a2990>"
  },
  {
    "objectID": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#false-color-image",
    "href": "posts/2024-12-03-thomas-fire/thomas-fire-blog.html#false-color-image",
    "title": "Remote Sensing Analysis of the Thomas Fire",
    "section": "False Color Image",
    "text": "False Color Image\nSince you are able to select which bands go in each channel, you can use the colors to view different spectral bands. In the following map, shortwave infrared (SWIR) in placed in the red channel, near infrared (NIR) is placed in the green channel, and red wavelength is placed in the blue channel.\n\n# Create false color image with short infrared, near infrared and red \nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust=True)\n\n<matplotlib.image.AxesImage at 0x7f74cd7cd290>\n\n\n\n\n\nThe RGB image and False color image were produced by selecting certian bands to go in channels that display those colors. Notice in the two maps the robust parameter within plot.imshow(). When set to True, it adjusts the color scale to exlude outliers and improving visualization.\nNow let’s bring it all together and include the fire boundary that I extracted from the CAL FIRE data base. Bofore I can use the fire boundary in my map, I need to ensure it is in the same coordidant reference system. The following code reprojects the CRS if need be before moving forward.\n\n# Ensure CRSs match (and reproject if necessary)\nif landsat.rio.crs != thomas.crs:\n    thomas = thomas.to_crs(landsat.rio.crs)\n\n# Validate the CRSs match\nassert landsat.rio.crs == thomas.crs\n\nWith the perimeter data CRS now set to match the landsat data, they can be plotted in the same map.\nHere are some highlights of the map creation:\n\nmatplotlib.patches is utilzed to create a custom legend that displays what colors correspond to which bands. This submodule provides various geometric shapes which can be added to plots for annotating or highlighting specific areas, but I find it helpful to use to create legends for plots with non-standard markers.\nScalebar() is used to include a 50 km scale bar which gives the map a relative size and also provide more context to the extent of the fire’s range.\n\n\n\nShow code\n# Plot false color image with thomas fire boundary \nfig, ax= plt.subplots(figsize = (10, 10), facecolor='white')\n\n# False color landsat image \nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust=True,\n                                                           ax=ax\n                                                          )\n\n# Overlay Thomas Fire boundary\nthomas.boundary.plot(ax=ax,\n                     color = \"maroon\",\n                     linewidth=2)\n\n# Create custom legend for short wave and infrared \nswir_patch = mpatches.Patch(color='#FD8A75', label='Short Wave Infrared')\nnir_patch = mpatches.Patch(color='#67FF5B', label='Near Infrared')\n\n\n# Set legend position \nax.legend(handles=[swir_patch, nir_patch], loc='upper right', title='Bands')\n\n\n# Set perimeter label \nax.text(\n    x=287070.0, y=3832030.0,  # Coordinates \n    s=\"Thomas Fire Perimeter\",  # Label text\n    color='maroon', fontsize=8, weight='bold',  \n    bbox=dict(facecolor='white', alpha=0.5, edgecolor='none') \n    \n)\n# Set scale bar \nscalebar = ScaleBar(1, units='m', location='lower left', length_fraction=0.25, scale_loc='bottom', color='black')  \nax.add_artist(scalebar)\n\n\n# Set title                                                           \nax.set_title(\"Santa Barbara and Ventura County, CA (2018-01-26)\", weight='bold')\n\n# Remove axes ticks\nax.set_xticks([])  \nax.set_yticks([])  \n\n# Remove axes labels\nax.set_xlabel(\"\")  \nax.set_ylabel(\"\")  \n\nplt.show()\n\n\n\n\n\nFigure Description: This map highlights the area of Santa Barbara and Ventura counties affected by the Thomas Fire, which burned over 280,000 acres from December 4, 2017, until its containment on January 12, 2018. The fire’s total burn perimeter is outlined in dark red. The false-color image incorporates shortwave infrared (SWIR) in red, which is particularly effective for identifying areas of burn damage, as newly burned land strongly reflects SWIR wavelengths. The near-infrared (NIR) band is represented in green, highlighting healthy vegetation, as plants strongly reflect NIR.\nIn conclusion, visualizing AQI scores during the Thomas Fire and mapping its burn scar using SWIR provides valuable insights into the fire’s impact on Santa Barbara and Ventura counties. However, it is important to note that these analyses primarily illustrate large-scale effects and do not adddress the fire’s direct impacts on people and the environment at the ground level."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Remote Sensing Analysis of the Thomas Fire\n\n\n\nPython\n\n\nMEDS\n\n\nSpatial-Analysis\n\n\n\nThis project aims to explore the area impacted by the Thomas Fire across Ventura and Santa Barbara counties in 2017.\n\n\n\nJordan Sibley\n\n\nDec 3, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]